#!/usr/bin/env python
#check
import argparse
import socket
import time
import json
import select
import struct
import math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks',
                    type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    forward_table = None

    def __init__(self, networks):
        self.routes = {}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        self.forward_table = {}
        self.revokes = {}
        self.forward_table_backup = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def debug_helper(self, message, message_title, level = 0):
        print("---- START " + message_title + "----")
        print(message)
        print("---- FINISH " + message_title + " ----")

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """

        outroutes = []
        min_so_far = 999999999999
        # Find the greatest
        for route in routes:
            if len(route["ASPath"]) < min_so_far:
                min_so_far = len(route["ASPath"])
        # If it is greatest, take it
        for route in routes:
            if len(route["ASPath"]) == min_so_far:
                outroutes = outroutes + [route]
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        max_so_far = -1
        # Find the greatest
        for route in routes:
            #self.debug_helper(int(route["localpref"]), "What is localpref")
            if int(route["localpref"]) > max_so_far:
                max_so_far = int(route["localpref"])
        # If it is greatest, take it
        for route in routes:
            if int(route["localpref"]) == max_so_far:
                outroutes = outroutes + [route]
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for route in routes:
            #print("==================")
            #print("self origin is" + route["route_selforigin"])
            #print("result is " + str(bool(route["route_selforigin"].encode('utf-8')) == True))
            #print("========end==========")
            if route["route_selforigin"].encode('utf-8') == "True":
                outroutes = outroutes + [route]

        # If this is empty, there were no trues, so all are false
        if len(outroutes) == 0:
            outroutes = routes

        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        outroutes = []
        for route in routes:
            if route["origin"].encode('utf-8') == 'IGP':
                outroutes = outroutes + [route]
        if len(outroutes) == 0:
            for route in routes:
                if route["origin"].encode('utf-8') == 'EGP':
                    outroutes = outroutes + [route]
        if len(outroutes) == 0:
            for route in routes:
                if route["origin"].encode('utf-8') == 'UNK':
                    outroutes = outroutes + [route]
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        #self.debug_helper(routes, "routes")
        source_type = self.relations[srcif]
        for route in routes:
            forward_to = self.relations[route["forward_to"]]
            # if ((self.relations[srcif] == 'peer' or self.relations[srcif] == 'prov') and 
            # (self.relations[forward_to] == 'peer' or self.relations[forward_to] == 'prov')):
            #     continue
            #self.debug_helper(forward_to, "forward_to")
            #self.debug_helper(source_type, "source_type")
            if source_type == 'cust' or forward_to == 'cust':
                outroutes = outroutes + [route]
        #self.debug_helper(outroutes, "outroutes")
        return outroutes

    # def get_route(self, srcif, daddr):
    #     """	Select the best route for a given address	"""
    #     # TODO
    #     peer = None
    #     routes = lookup_routers(daddr)
    #     # Rules go here
    #     if routes:
    #         # 1. Highest Preference
    #         routes = self.get_highest_preference(routes)
    #         # 2. Self Origin
    #         routes = self.get_self_origin(routes)
    #         # 3. Shortest ASPath
    #         routes = self.get_shortest_as_path(routes)
    #         # 4. EGP > IGP > UNK
    #         routes = self.get_origin_routes(routes)
    #         # 5. Lowest IP Address
    #         # TODO
    #         # Final check: enforce peering relationships
    #         routes = self.filter_relationships(srcif, routes)
    #     return self.sockets[peer] if peer else None

    def get_lowest_ip(self, routes):
        outroutes = []
        min_so_far = 9999999999999
        for route in routes:
            temp = int("".join(route["forward_to"].split(".")))
            if temp < min_so_far:
                min_so_far = temp
        for route in routes:
            temp = int("".join(route["forward_to"].split(".")))
            if temp == min_so_far:
                outroutes = outroutes + [route]
        return outroutes

    def get_route(self, srcif, valid_paths):
        #print(valid_paths)
        """	Select the best route for a given address	"""
        peer = None
        # Rules go here
        if len(valid_paths) > 0:
            # 1. Highest Preference
            valid_paths = self.get_highest_preference(valid_paths)
            #self.debug_helper(valid_paths,"after highest localpref")
            #print("Pref")
            #print(valid_paths)
            # 2. Self Origin
            valid_paths = self.get_self_origin(valid_paths)
            #self.debug_helper(valid_paths,"path after selforigin")
            #print("Self")
            #print(valid_paths)
            # 3. Shortest ASPath
            valid_paths = self.get_shortest_as_path(valid_paths)
            #print("ASPath")
            #print(valid_paths)
            # 4. EGP > IGP > UNK
            valid_paths = self.get_origin_routes(valid_paths)
            #print("Origin")
            #print(valid_paths)
            # 5. Lowest IP Address
            valid_paths = self.get_lowest_ip(valid_paths)
            #print("Lowest")
            #print(valid_paths)
            # Final check: enforce peering relationships
            valid_paths = self.filter_relationships(srcif, valid_paths)
            #print(len(valid_paths) == 1)
            if len(valid_paths) == 1:
                peer = valid_paths[0]
            #else:
                #print("Length of valid_paths")
                #print(len(valid_paths))
        #return self.sockets[peer] if peer else None
        return peer



    def forward(self, srcif, packet):
        """	Forward a data packet	"""

        # Find all the valid places we can forward to
        # Use priority rules to find the one place we should send to
        # In the case that we don't know the location of it, send it back

        valid_path = []
        packet_dest = packet["dst"]

        # For every destination
        for destination in self.forward_table:
            # Find the submask and validate it is a member of the network
            entry_netmask = self.forward_table[destination][0]["final_dest_netmask"]
            in_neighbor_network = (self.bitwise_and(
                packet_dest, entry_netmask) == self.convertIpToBinary(destination))
            # If it is a valid member, it is a valid path
            if in_neighbor_network:
                # Check longest netmask 
                if valid_path:
                    current_netmask = int(self.convertIpToBinary(valid_path[0]["final_dest_netmask"]))
                    new_netmask = int(self.convertIpToBinary(self.forward_table[destination][0]["final_dest_netmask"]))
                    #self.debug_helper(current_netmask, "current_netmask")
                    #self.debug_helper(new_netmask, "new_netmask")

                    if new_netmask > current_netmask:
                        valid_path = self.forward_table[destination]

                else:
                    #If empty, just take it
                    valid_path = self.forward_table[destination]
        # # No matches, we don't know this place so send it back
        if (len(valid_path) == 0):
            #print("NO VALID PATH WAS CALLED")
            packet["type"] = "no route"
            packet["dst"] = packet["src"]
            packet["msg"] = {}
            src = srcif.split(".")
            src[-1] = str(int(src[-1]) -1)
            packet["src"] = ".".join(src)
            self.forward(srcif, packet)
            return
        
        #best_location = self.find_priority(valid_path)
        best_location = self.get_route(srcif, valid_path)
        if (best_location):
            self.sockets[best_location["forward_to"]].send(json.dumps(packet).encode())
        else:
            packet["type"] = "no route"
            packet["dst"] = packet["src"]
            packet["msg"] = {}
            src = srcif.split(".")
            src[-1] = str(int(src[-1]) -1)
            packet["src"] = ".".join(src)
            #print(packet)
            self.sockets[srcif].send(json.dumps(packet).encode())
        return

    def bitwise_and(self, ip_address_1, ip_address_2):
        list_of_numbers_1 = ip_address_1.split(".")
        list_of_numbers_2 = ip_address_2.split(".")
        list_of_binary_1 = ''.join(
            map(lambda num: '{0:08b}'.format(int(num)), list_of_numbers_1))
        list_of_binary_2 = ''.join(
            map(lambda num: '{0:08b}'.format(int(num)), list_of_numbers_2))
        final_bitwise = ''

        for x in range(len(list_of_binary_1)):
            num_binary_1 = int(list_of_binary_1[x])
            num_binary_2 = int(list_of_binary_2[x])
            final_bitwise = final_bitwise + str(num_binary_1 & num_binary_2)
        return final_bitwise

    def convertIpToBinary(self, ip_address):
        list_of_numbers = ip_address.split(".")
        list_of_binary = map(
            lambda num: '{0:08b}'.format(int(num)), list_of_numbers)
        return ''.join(list_of_binary)

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        packet_msg = packet["msg"]
        final_dest_ip = packet_msg["network"]
        route_info = {}
        route_info["forward_to"] = packet["src"]
        route_info["final_dest_netmask"] = packet_msg["netmask"]
        route_info["localpref"] = packet_msg["localpref"]
        route_info["route_selforigin"] = packet_msg["selfOrigin"]
        route_info["ASPath"] = packet_msg["ASPath"]
        route_info["origin"] = packet_msg["origin"]


        if self.find_potential_aggregation(final_dest_ip, packet_msg["netmask"]):
            self.forward_table[final_dest_ip] = []
        else:

            # Forwarding table is of type Destination: array of Route information
            if final_dest_ip not in self.forward_table:
                self.forward_table[final_dest_ip] = []
                self.forward_table_backup[final_dest_ip] = []


            self.forward_table[final_dest_ip] = self.forward_table[final_dest_ip] + [route_info]
            self.forward_table_backup[final_dest_ip] = self.forward_table_backup[final_dest_ip] + [route_info]
        
        router = packet["dst"]
        for sock in self.sockets:
            if sock != srcif:
                packet["src"] = router
                packet["dst"] = sock
                socket = self.sockets[sock]
                if (self.relations[srcif] == 'cust'):
                    socket.send(json.dumps(packet).encode())
                else:
                    if (self.relations[sock] == 'cust'):
                        socket.send(json.dumps(packet).encode())
        #print(self.forward_table)
        return False

    def find_most_right_non_0_ip(self, ip):
        split_ip = ip.split(".")
        found = False
        location = 1
        # Find location of last value
        for value in reversed(split_ip):
            if not found and int(value) != 0:
                found = True
                break
            else:
                location = location + 1
        return location * -1
    
    def find_most_right_non_0_binary(self, number):
        binary_split = list(number)
        found = False
        location = 1
        for value in reversed(binary_split):
            if not found and int(value) != 0:
                found = True
                break
            else:
                location = location + 1
        return location * -1

    def find_potential_aggregation(self, final_dest_ip, netmask):
        in_network = self.bitwise_and(final_dest_ip, netmask)
        in_network = list(in_network)
        in_network.insert(8, ".")
        in_network.insert(17, ".")
        in_network.insert(26, ".")
        in_network = "".join(in_network)

        in_network_split = in_network.split(".")

        ip_location = self.find_most_right_non_0_ip(in_network)
        binary_location = self.find_most_right_non_0_binary(in_network_split[ip_location])
        for key in self.forward_table:
            key_in_network = self.bitwise_and(key, self.forward_table[key][0]["final_dest_netmask"])
            key_in_network = list(key_in_network)
            key_in_network.insert(8, ".")
            key_in_network.insert(17, ".")
            key_in_network.insert(26, ".")
            key_in_network = "".join(key_in_network)
            key_in_network_split = key_in_network.split(".")

            same = 0

            key_ip_location = self.find_most_right_non_0_ip(key_in_network)
            key_binary_location = self.find_most_right_non_0_binary(key_in_network_split[key_ip_location])
            # print(key)
            # print(key_binary_location)

            final_dest_ip_split = final_dest_ip.split(".")
            key_split = key.split(".")
            for i in range(len(final_dest_ip_split)):
                if final_dest_ip_split[i] == key_split[i]:
                    same = same + 1
                else:
                    break
            #self.debug_helper(same,"same",6)
            #self.debug_helper(key_ip_location,"loc",6)
            #self.debug_helper(key_ip_location * -1 + same, "sum", 6)
            if (key_ip_location * -1) + same == 4:
                # self.debug_helper(binary_location, "base", 6)
                # self.debug_helper(key_binary_location, "key", 6)
                #self.debug_helper(in_network, "base", 6)
                #self.debug_helper(key_in_network, "key", 6)
                # print(".............")
                if (binary_location + 1 == key_binary_location or binary_location - 1 == key_binary_location):
                    return True

        return False

    def revoke(self, packet):
        """	handle revoke packets	"""
        # Array of networks/netmask
        msg = packet["msg"]
        src = packet["src"]
        dst = packet["dst"]

        for entry in msg:
            network = entry["network"]
            if len(self.forward_table[network]) == 1:
                del self.forward_table[network]
            else:
                self.forward_table[network] = self.delete_entries_going_to_ip(self.forward_table[network], src)
        router = packet["dst"]
        for sock in self.sockets:
            if sock != src:
                packet["src"] = router
                packet["dst"] = sock
                socket = self.sockets[sock]
                if (self.relations[src] == 'cust'):
                    socket.send(json.dumps(packet).encode())
                else:
                    if (self.relations[sock] == 'cust'):
                        socket.send(json.dumps(packet).encode())
        
        return False

    def delete_entries_going_to_ip(self,routes, ip_to_remove):
        newEntry = []
        for route in routes:
            route_going_to_ip = route["forward_to"]
            if route_going_to_ip != ip_to_remove:
                newEntry.append(route)
        return newEntry

    def dump(self, packet):
        """ handles dump table requests """
        table_msg = {}
        table_msg["src"] = packet["dst"]
        table_msg["dst"] = packet["src"]
        table_msg["type"] = "table"
        table_list = []
        for dest in self.forward_table:
            for route in self.forward_table[dest]:
                entry = {}
                entry["network"] = dest
                entry["netmask"] = route["final_dest_netmask"]
                entry["peer"] = route["forward_to"]
                table_list.append(entry)
        table_msg["msg"] = table_list

        self.sockets[table_msg["dst"]].send(json.dumps(table_msg))

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        #print("------- RELATIONSHIPS -------")
        #print(self.relations)
        #print("------- DONE RELATIONSHIPS -------")
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    msg_type = msg["type"]
                    if msg_type == "update":
                        self.update(srcif, msg)
                    elif msg_type == "data":
                        self.forward(srcif, msg)
                    elif msg_type == "dump":
                        self.dump(msg)
                    elif msg_type == "revoke":
                        self.revoke(msg)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
