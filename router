#!/usr/bin/env python

import argparse
import socket
import time
import json
import select
import struct
import math

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks',
                    type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    forward_table = None

    def __init__(self, networks):
        self.routes = {}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        self.forward_table = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = lookup_routers(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""

        # Find all the valid places we can forward to
        # Use priority rules to find the one place we should send to
        # In the case that we don't know the location of it, send it back

        valid_path = []
        packet_dest = packet["dst"]

        # For every destination
        for destination in self.forward_table:
            # Find the submask and validate it is a member of the network
            entry_netmask = self.forward_table[destination][0]["final_dest_netmask"]
            in_neighbor_network = (self.bitwise_and(
                packet_dest, entry_netmask) == self.convertIpToBinary(destination))
            # If it is a valid member, it is a valid path
            if in_neighbor_network:
                valid_path = self.forward_table[destination]

        # # No matches, we don't know this place so send it back
        # if (len(valid_path) == 0):
        #     packet["type"] = "no route"
        #     dst = packet['dst']
        #     packet['dst'] = packet['src']
        #     packet['src'] = dst
        #     packet["msg"] = {}
        #     self.forward(srcif, packet)
        #     return

        best_location = valid_path[0] if (
            len(valid_path) == 1) else self.find_priority(valid_path)
        self.sockets[best_location["forward_to"]].send(
            json.dumps(packet).encode())
        return

    def find_priority(self, valid_locations):
        # TODO longest prefix match -> level 5
        # highest localpref
        # SelfOrign = true
        # shotest ASPath
        # Best origin IGP>EGP>UNK
        # Lowest IP

        best_location = valid_locations[0]
        for entry in valid_locations:
            if best_location["localpref"] > entry["localpref"]:
                continue
            elif best_location["localpref"] == entry["localpref"]:
                if best_location["route_selforigin"] and not entry["route_selforigin"]:
                    continue
                elif (best_location["route_selforigin"] == entry["route_selforigin"]):
                    # compare next
                    if len(best_location["ASPath"]) < len(entry["ASPath"]):
                        continue
                    elif len(entry["ASPath"]) == len(best_location["ASPath"]):
                        # compare next
                        if self.origin1_priority(best_location["origin"], entry["origin"]) > 0:
                            continue
                        elif self.origin1_priority(best_location["origin"], entry["origin"]) == 0:
                            #compare next
                            if self.lowest_ip(best_location, entry):
                                continue
                            else:
                                # Not lowest ip
                                best_location = entry
                        else:
                            best_location = entry
                    else:
                        # other length is shorter
                        best_location = entry
                else:
                    # take new one
                    best_location = entry
            else:
                # best so far is less than new entry
                best_location = entry

        return best_location

    # neg = lower priorty, 0 = same, pos is higher
    def origin1_priority(self, origin1, origin2):
        values = {"IGP": 3, "EGP": 2, "UNK": 1}
        return values[origin1] - values[origin2]

    # Returns if the second ip is lower than the first
    def lowest_ip(self, ip1, ip2):
        first = "".join(ip1["forward_to"].split("."))
        second = "".join(ip2["forward_to"].split("."))
        return first < second

    def bitwise_and(self, ip_address_1, ip_address_2):
        list_of_numbers_1 = ip_address_1.split(".")
        list_of_numbers_2 = ip_address_2.split(".")
        list_of_binary_1 = ''.join(
            map(lambda num: '{0:08b}'.format(int(num)), list_of_numbers_1))
        list_of_binary_2 = ''.join(
            map(lambda num: '{0:08b}'.format(int(num)), list_of_numbers_2))
        final_bitwise = ''

        for x in range(len(list_of_binary_1)):
            num_binary_1 = int(list_of_binary_1[x])
            num_binary_2 = int(list_of_binary_2[x])
            final_bitwise = final_bitwise + str(num_binary_1 & num_binary_2)
        return final_bitwise

    def convertIpToBinary(self, ip_address):
        list_of_numbers = ip_address.split(".")
        list_of_binary = map(
            lambda num: '{0:08b}'.format(int(num)), list_of_numbers)
        return ''.join(list_of_binary)

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        packet_msg = packet["msg"]
        final_dest_ip = packet_msg["network"]
        route_info = {}
        route_info["forward_to"] = packet["src"]
        route_info["final_dest_netmask"] = packet_msg["netmask"]
        route_info["localpref"] = packet_msg["localpref"]
        route_info["route_selforigin"] = packet_msg["selfOrigin"]
        route_info["ASPath"] = packet_msg["ASPath"]
        route_info["origin"] = packet_msg["origin"]

        # Forwarding table is of type Destination: array of Route information
        if final_dest_ip not in self.forward_table:
            self.forward_table[final_dest_ip] = []
        self.forward_table[final_dest_ip] = self.forward_table[final_dest_ip] + [route_info]
        router = packet["dst"]
        for sock in self.sockets:
            if sock != srcif:
                packet["src"] = router
                packet["dst"] = sock
                socket = self.sockets[sock]
                socket.send(json.dumps(packet).encode())

        return False

    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        """ handles dump table requests """
        table_msg = {}
        table_msg["src"] = packet["dst"]
        table_msg["dst"] = packet["src"]
        table_msg["type"] = "table"
        table_list = []
        for dest in self.forward_table:
            for route in self.forward_table[dest]:
                entry = {}
                entry["network"] = dest
                entry["netmask"] = route["final_dest_netmask"]
                entry["peer"] = route["forward_to"]
                table_list.append(entry)
        table_msg["msg"] = table_list

        self.sockets[table_msg["dst"]].send(json.dumps(table_msg))

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    msg_type = msg["type"]

                    if msg_type == "update":
                        self.update(srcif, msg)
                    elif msg_type == "data":
                        self.forward(srcif, msg)
                    elif msg_type == "dump":
                        self.dump(msg)

                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
